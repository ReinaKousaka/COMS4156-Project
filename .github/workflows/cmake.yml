name: CMake

on:
  push:
    branches: [ "trunk" ]
  pull_request:
    branches: [ "trunk" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependencies
      #libcurl should already be installed on CI runner, but not in a way that curlpp's cmake can find it
      run: sudo apt update && sudo apt install --no-install-recommends --fix-missing -y libasio-dev libcurl4-openssl-dev && python -m pip install --upgrade pip && pip install gcovr
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build client and server
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --target client server --config ${{env.BUILD_TYPE}} -- -j 2
    - name: Run end-to-end tests
      run: |
           cmake --build ${{github.workspace}}/build --target end-end-tests -- -j 2;
  test:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependencies
      run: sudo apt update && sudo apt install --no-install-recommends --fix-missing -y libasio-dev libcurl4-openssl-dev && python -m pip install --upgrade pip && pip install gcovr
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build and run GTest (unit tests, integration tests, system tests)
      # Execute tests defined by the CMake configuration.
      run: |
           cmake --build ${{github.workspace}}/build --target run-tiger-test -- -j 2;
    - name: Generate Code Coverage Report
      run: |
           cmake --build ${{github.workspace}}/build --target coverage -- -j 2;
  code-lint:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update && sudo apt install --no-install-recommends --fix-missing -y libasio-dev libcurl4-openssl-dev && python -m pip install --upgrade pip && pip install gcovr codespell cpplint
    - name: Set up CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Linting (print)
      run: cmake --build ${{github.workspace}}/build --target code-lint
    - name: Spell check (print and assert)
      run: cmake --build ${{github.workspace}}/build --target code-spell-ci
    - name: Linting (assert)
      run: cmake --build ${{github.workspace}}/build --target code-lint-ci
#Move static analysis into a separate job since it can be slow
  code-analyze:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Install dependencies
      run: sudo apt update && sudo apt install --no-install-recommends --fix-missing -y libasio-dev libcurl4-openssl-dev cppcheck && python -m pip install --upgrade pip && pip install gcovr
    - name: Set up CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Static Analysis (print)
      run: cmake --build ${{github.workspace}}/build --target code-analyze
    - name: Static Analysis (assert)
      run: cmake --build ${{github.workspace}}/build --target code-analyze-ci
